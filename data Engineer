GRAL PYTHON
Lenguaje: python
Conda: Gestor de paquetes y un sistema de gestión de entornos. CUenta con canales donde estan ubicadas las librerías/paquetes para su instalación.
Anaconda: es conda pero suma cositas. Esta orientado a simplificar el despliegue y administración de los paquetes de software. Facilita el uso de varias plataformas por ejemplo como visual studio code, jupyter, jupyterlab
Las librerías se obtienen por conda o pip, que buscan en archivos jerarquicamente.

archivos pueden ser .ipynb o.py. el archivo .py se puede correr desde un bash e ingresandole parametros! se definenn en el __main__ del .py por definición. sino, se suele usar para dejar parametrizable, un archivo de configruación .yml, q es un dicciónario parametrizable
otra forma de parametrizar un .py y que sea variable (en archivo de configuración .yml es mas estático), es asi:
import sys
nombre = sys.argv[1] #Aca va a estar el 1er parametro de entrada 

IPs
Cada diapositivo tiene una IP privada dinamica asociada al router (dinamica porque cambia en cada nueva conexión. ej. cuando reinicias el router) y se la
identifica dentro del bash con el comando ipconfig. es una ip que solo se puede acceder desde la red local.
Yy despues esta la IP publica (tambien dinamica, cuando reinicias router cambia por ejemplo. o cada tanto cambia),
que son los diapositivos que se pueden conectar a internet. Router es el clasico ejemplo. Esos si deberias poder encontrar mas datos porque son publicos. 
En esta pag por ejemplo te dice tu ip publica, y cuando reinicias el router debería cambiar: https://www.cualesmiip.com/

comandos en bash utiles para conexiones
ipconfig: ver conexiones vigentes
ping IP/host: Nos dice si hay conexión abierta, y tiempo de demora en envio y recibimiento de paquetes en bites
arp -a: ver las ips conctadas a la misma red local (siempre y cuando sea privada) en la que estoy
nslookup: conocer la ip relacionada a un host/dominio
netstat -a: para ver conexiones activas que tienen relación con mi IP
pathping: da mas información de velocidades y demás con una conexión puntual



ENTORNOS VIRTUALES 
me posiciono en la carpeta donde quiero tener el entorno
tengo que tener instalado virtualenv en python (una libreria. sino es "pip install virtualenv")
comando: "python3 -m venv p2" (se va a llamar "p2" el proyecto/entorno, y lo estoy creando). o sino tambien "virtualenv env". ojo que en microsoft python a veces tiene alias como py, seria py -m venv p2
comando para activar el entorno virtual, estando en la carpeta del entorno creado,p2 mi caso: 
linux: source bin/activate 
 windows: ".\Scripts\activate" estando dentro del entorno). El comando en windows para activar: "Scripts\activate"
 --ME VOY A DAR CUENTA SI APARECE EN EL COMANDO (p2) al inicio!!. 
 
 Y de aca voy a querer correr un .py o un .ipynb:
- .py: 
  corro el script phyton: Directorio >python nombre_archivo.py
- .ipynb:
  Dentro d
  el enviroment, necesito instalar la librería que cree un kernel para tratar a los archivos .ipynb:
  "ipython kernel install --user --name=venv", para visualizar los kerneles
   "pip install ipykernel", esto para crear un kernel dentro del ambiente
   "python -m ipykernel install --user --name ENVNAME --display-name nombre kernel
  Una vez instalado, lo debería ver como opción para selecciónar como kernel
  
  
  Una vez dentro del ambiente, puedo ejecutar condas comandos desde el cmd, o ir a jupyterlab/jupyter o Visual studio, seleccionar el kernel creado y configurarlo a gusto.
  Para modificar el python, es desde los comandos. ejemplo:conda install python=3.6
  
    con "deactivate" sale del entorno!

----  
OTRA FORMA DE CREAR AMBIENTES
"conda create -n tutorial python=3.7"

conda activate tutorial
conda deactivate

 ipykernel permite usar el enviroment en jupyter: "pip install ipykernel"
 we can link a kernel to our virtual environment con este comando: python -m ipykernel install --user --name=tutorial
 Cuando linkeas, despues no necesitas activar el ambiente!! simplemente usando el kernel, ya esta ok!!!
-----
ver los kernels instalados: jupyter kernelspec list
Eliminar kernel "tutorial": jupyter kernelspec remove tutorial
ver ambientes instalados: conda env list
Eliminar ambientes"tutorial": conda env remove -n tutorial



SI LO QUE QUIERO ES HACER UNA FOTO DE LAS LIBRERÍAS INSTALADAS, CORRO ESTE COMANDO PARA QUE SE ME GUARDEN EN UN TXT POR CUALQUIER COSA:
pip freeze > requirements.txt


La otra forma, mas detallista: pipreqs carpeta1/ --use-local --force (es el request.txt pero de lo q se usa en esa carpeta carpeta1, no de lo q hay en el ambiente como en el freeze)


ME VA A GUARDAR UN .TXT. EN LA MISMA UBICACIÓN DEL SCRIPT DONDE LO CORRI CON TODOS LOS MODULOS Y VERSIONES
Si quiero trabajar dentro de un entorno virtual, con las librarias de un request.txt, hago asi:
primero instalo en el entorno:
pip install requests
pip install mechanize
y luego, continuando dentro del entorno corro: pip install -r requirements.txt. Este ultimo comando instala todas las librerias de ese archivo en el entorno

COMPUTADORA
ROM: 1 tera  (Memoria de computadora, relacionado con datalake.barato e infinito
RAM: 8 a 32GB buena performance. memoria volatil de corto plazo para procesamiento
BITES: 32 o 64. es la minima unidad del procesador. si tiene 32, solo puede trabajar con hasta 4 GB de ram. si tiene 64 como 1 TB.
PROCESADOR: CPU (trabaja más en seria) o GPU (trabaja más en paralelo) según arquitectura. Normalmente tienen 1 cluster/servidor/nodo master con otros nodos/nucleos/workers. Cada nodo tiene un core(procesador) que la suman hacen  y soportan una memoria RAM específica que se utilizan según necesidades optimizadamente. 
La principal diferencia entre CPU y GPU, es que GPU trabaja con miles de microprocesadores/nucleos CUDA en paralelo. Super útil cuando se quiere correr varias acciones
simples en paralelo (generar una imagen, minar crypto, entrenar ML), porque son logicas simples pero muchas de ellas. Si, en cambio, tenes un CPU, esas logicas simples
se realizarian en serie. UNA LOCURA Y TOTALMENTE INECESARIO. La mayoria de entrenamientos de tensorflow/pytorch requieren GPU, que seria asi:

gpu_info = !nvidia-smi
gpu_info = '\n'.join(gpu_info)
if gpu_info.find('failed') >= 0:
  print('Not connected to a GPU')
else:
  print(gpu_info)
  
import torch 
device = torch.device("cuda:0" if torch.cuda.is_available() else "cpu")
device

##Aplico al modelo
# model = Wav2Vec2ForCTC.from_pretrained(modelo).to("cuda")



CONEXCIONES, VPN y APIs

PARA TENER ACCESO A REDES DE EMPRESAS (DONDE TIENEN CIERTOS PROGRAMAS, APLICACIONES Y DATOS), SE NECESITA contar con UN IP publica QUE ESTE DENTRO DEL RANGO DE LAS IPs DE LA RED. Varios caminos:

VPN. que biwares tenga una VPN tal que cuando nos conectamos, la VPN transforma la IP publica nuestra, en una IP valida para esa red en u proceso de encriptado o enmascarado (hay varios softwares que permiten esto. entre los más usados, Forticlient o OpenVPN). Proxy hace algo parecido pero no a nivel SO como la VPN, sino a nivel aplicación y sin software.
Tener acceso con credenciales a una maquina virtual/instancia (con las herramientas Virtual Box o VMware), la cual si tenga una IP dentro del rango aceptado por la red. Esto puede estar de forma local (ocupa 16gb por ejemplo) o en la nube, pudiendo estar siempre prendida.
Hacer una excepeción configurando el firewall, donde se solicita que las IPs nuestras, la de mi compu, tenga acceso a su red. (es lo más peliloso)

Además de todo esto, hay algunas redes privadas que tienen otra capa de seguridad y necesitan un tunnel (SSH). kerberos tambien es algo de esto y los proxy.


IP publica es la del modem a la que estoy conectado, y la que se actualiza cuando se resetea. IP privada es la que me diferencia de los demas diapositivos dentro de mi red (modem)

Luego, si me quiero conectar a la base de datos, necesito un gestor de base de datos como dbeaver y saber:
host:
puerto:
database: 
usuario y contraseña (Las credenciales)
tipo de base de datos: (si es mysql, azure, redshift,etc. cada uno de estos tiene diferentes drivers, que son quienes funcionan de interpretador, propios de cada tecnología)



CONCEPTOS
procesos asincronicos: (procesos que no suceden en serie, uno atras de otro instantaneamente. Sino que suceden, se "activan" cuando se dan ciertos eventos, discontinuamente. Librerias:  AIOHTTP, SANIC o Vibora)
multiprocessing: varios procesos en simultaneo. EN paralelo
concurrencia: capacidad de paralelizar procesos.
bloqueante: tareas que usan el thread (procesador creo) y no dan lugar a que se ejecute otra tarea hasta que devuelva el resultado
No Bloqueante: Una operación de éste tipo no bloquea el Thread ya que devuelve inmediatamente el control a nuestra aplicación independientemente del resultado

Sincrónico: el ejemplo, es hacer la fila para comprar una entrada de cine. Para recibir el ticket (el resultado), necesitas esperar a que todos los de adelanten compren 
Asincrónico:el ejemplo, es hacer fila en macdonal. Aca, la diferencia es que la persona de adelante que compro, pero que no le dieron el producto (resultado), te da espacio a que vs compres!! el script ya corrio, deja que otro procesa corra aunq no tengas el resultado. y cuando se devuelva el resultado, mas adelante te lo da sin ocupar el procesador
